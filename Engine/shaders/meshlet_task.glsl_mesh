#version 460

#extension GL_EXT_control_flow_attributes: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_KHR_shader_subgroup_vote: require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_mesh_shader: require

#include <./data/shader/meshlet_def.h>
#include <./data/shader/mesh_def.h>

layout(set = 0,binding = 0,scalar) uniform  UniformBuffer { mat4   inMtx; vec3 camPos;} ubo;


layout(set = 1,binding = 0,scalar) readonly buffer MeshletDatas { MeshData data[]; } meshletDatas;
layout(set = 1,binding = 1,scalar) readonly buffer DrawDatas { DrawData data[]; } drawDatas;
layout(set = 1,binding = 2,scalar) readonly buffer DrawID { uint data[]; } drawIDs;
layout(set = 1,binding = 3,scalar) readonly buffer VertexData { float data[]; } vertexDatas;

layout(set = 4,binding = 0,scalar) readonly buffer GMeshletDescriptor { MeshletDescriptor data[]; } meshletDescriptors;
layout(set = 4,binding = 1,scalar) readonly buffer GMeshletDatas { GMeshlet data[]; } gmeshletDatas;
layout(set = 4,binding = 2,scalar) readonly buffer MeshletVertexDatas { uint data[]; } meshletVertexDatas;
layout(set = 4,binding = 3,scalar) readonly buffer MeshletTriangleDatas { uint8_t data[]; } meshletTriangleDatas;

layout(set = 2,binding = 0,scalar) readonly buffer TransformDatas { mat4 data[]; } transformDatas;

const uint kVertexLoops = (kMaxVerticesPerMeshlet + kShaderGroupSizeNV - 1) / kShaderGroupSizeNV;
const uint kTriangleLoops = (kMaxTrianglesPerMeshlet + kShaderGroupSizeNV - 1) / (kShaderGroupSizeNV);

layout(local_size_x = kShaderGroupSizeNV) in;
layout(max_vertices = kMaxVerticesPerMeshlet, max_primitives = kMaxTrianglesPerMeshlet) out;
layout(triangles) out;

struct TaskData
{
	uint meshletIndices[kShaderGroupSizeNV];
};

taskPayloadSharedEXT TaskData td;

// Per Vertex
layout(location = 0) out vec2 uv[];
layout(location = 1) out vec3 v_worldNormal[];
layout(location = 2) out vec4 v_worldPos[];
layout(location = 3) out flat uint matIdx[];
layout(location = 4) out flat uint hasTBN[];
layout(location = 5) out mat3 oTBN[];

vec3 octahedral_decode(vec2 f) {
    vec3 n = vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-n.z, 0.0);
    n.x += n.x >= 0.0 ? -t : t;
    n.y += n.y >= 0.0 ? -t : t;
    return normalize(n);
}

vec3 getRandomColor(
	uint _seed)
{
	uint hash = (_seed ^ 61) ^ (_seed >> 16);
	hash = hash + (hash << 3);
	hash = hash ^ (hash >> 4);
	hash = hash * 0x27d4eb2d;
	hash = hash ^ (hash >> 15);
	return vec3(float(hash & 255),
				float((hash >> 8) & 255),
				float((hash >> 16) & 255)) / 255.0;
}

uint hash(uint a)
{
   a = (a+0x7ed55d16) + (a<<12);
   a = (a^0xc761c23c) ^ (a>>19);
   a = (a+0x165667b1) + (a<<5);
   a = (a+0xd3a2646c) ^ (a<<9);
   a = (a+0xfd7046c5) + (a<<3);
   a = (a^0xb55a4f09) ^ (a>>16);
   return a;
}

vec3 getHashedColor(uint id)
{
	uint mhash = hash(id);
 	return vec3(float(mhash & 255), float((mhash >> 8) & 255), float((mhash >> 16) & 255)) / 255.0;
}

void main()
{
	uint groupIndex = gl_WorkGroupID.x;
	uint groupThreadIndex = gl_LocalInvocationID.x;
	uint meshletIndex = td.meshletIndices[groupIndex]; 
	uint drawId = drawIDs.data[gl_DrawID];
	uint meshletDataIndex = drawDatas.data[drawId].meshIndex;
	uint transformIndex = drawDatas.data[drawId].transformIndex;
	uint materialIndex = drawDatas.data[drawId].materialIndex;

	MeshData meshlet = meshletDatas.data[meshletDataIndex];
	MeshletDescriptor meshletDescriptor = meshletDescriptors.data[meshletDataIndex];
	GMeshlet localMeshlet = gmeshletDatas.data[meshletIndex];
	if(meshletDataIndex >= meshletDescriptor.meshletOffset + meshletDescriptor.meshletCount)
	{
		SetMeshOutputsEXT(0,0);
		return;
	}
	mat3 inModel = transpose(inverse(mat3(transformDatas.data[transformIndex])));

	// Begin float value
	uint globalVertexOffset = meshlet.vertexOffset;
	if(groupThreadIndex == 0)
	{
		SetMeshOutputsEXT(localMeshlet.vertexCount, localMeshlet.triangleCount);
	}
	
	vec3 meshletColor = getHashedColor(meshletIndex);
	
	[[unroll]]
	for (uint loopIndex = 0; loopIndex < kVertexLoops; ++loopIndex)
	{
		uint localVertexIndex = groupThreadIndex + loopIndex * kShaderGroupSizeNV;
		localVertexIndex = min(localVertexIndex, localMeshlet.vertexCount - 1);
		
		// 13 is per vertex count current
		uint currentIndex =  (meshletVertexDatas.data[localMeshlet.vertexOffset + localVertexIndex]);
		uint stride = currentIndex*13;
		uint currentVertexBeginFloat = globalVertexOffset + stride;
		
		
		vec2 vuv = vec2(vertexDatas.data[currentVertexBeginFloat+3],vertexDatas.data[currentVertexBeginFloat+4]);
		vec3 pos = vec3(vertexDatas.data[currentVertexBeginFloat],vertexDatas.data[currentVertexBeginFloat+1],vertexDatas.data[currentVertexBeginFloat+2]);
		vec2 norm = vec2(vertexDatas.data[currentVertexBeginFloat+5],vertexDatas.data[currentVertexBeginFloat+6]);
		
		// Proj position
		vec4 tempPos = vec4(pos.x,pos.y,pos.z, 1.0f);
		
		gl_MeshVerticesEXT[localVertexIndex].gl_Position =  (ubo.inMtx *  transformDatas.data[transformIndex]  * tempPos);
		vec3 aNormal = octahedral_decode(norm);
		vec3 worldNormal = inModel * aNormal;
		uv[localVertexIndex] = vuv;
		v_worldNormal[localVertexIndex] = worldNormal;
		mat4 model = transformDatas.data[transformIndex];
		v_worldPos[localVertexIndex] = model  * tempPos;
		matIdx[localVertexIndex] = materialIndex;
		hasTBN[localVertexIndex] = 0;

		if((meshlet.meshFlag & MESH_TYPE_HAS_TANGENT_BITANGENT) != 0)
		{	
			// 7 8 9 Tangent
			vec3 aTangent = vec3(vertexDatas.data[currentVertexBeginFloat+7],vertexDatas.data[currentVertexBeginFloat+8],vertexDatas.data[currentVertexBeginFloat+9]);
			// 10 11 12 Bitangent
			vec3 aBitangent = vec3(vertexDatas.data[currentVertexBeginFloat+10],vertexDatas.data[currentVertexBeginFloat+11],vertexDatas.data[currentVertexBeginFloat+12]);
			vec3 T = normalize(vec3(model * vec4(aTangent,   0.0)));
   			vec3 B = normalize(vec3(model * vec4(aBitangent, 0.0)));
   			vec3 N = normalize(vec3(model * vec4(aNormal,    0.0)));
			oTBN[localVertexIndex] = mat3(T, B, N);
			hasTBN[localVertexIndex] = 1;
		}
		
	}
	uint vertexMax = localMeshlet.vertexCount - 1;
	uint packedTrianglesMax = localMeshlet.triangleCount - 1;
	uint packedTriangleOffset = (localMeshlet.triangleOffset);
	
	[[unroll]]
	for (uint loopIndex = 0; loopIndex < kTriangleLoops; ++loopIndex)
	{
		uint localTriangleIndex = groupThreadIndex + loopIndex * kShaderGroupSizeNV;
		localTriangleIndex = min(localTriangleIndex, packedTrianglesMax);		
		uvec3 index = uvec3(meshletTriangleDatas.data[packedTriangleOffset + localTriangleIndex *3 + 0],
                              meshletTriangleDatas.data[packedTriangleOffset + localTriangleIndex *3 + 1],
                              meshletTriangleDatas.data[packedTriangleOffset + localTriangleIndex *3 + 2]);
        	
		gl_PrimitiveTriangleIndicesEXT[localTriangleIndex] = index;	

	}
}