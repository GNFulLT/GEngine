#version 460

layout (set = 0,binding = 0) uniform sampler2D samplerPosition;
layout (set = 0,binding = 1) uniform sampler2D samplerAlbedo;
layout (set = 0,binding = 2) uniform sampler2D samplerEmission;
layout (set = 0,binding = 3) uniform sampler2D samplerPBR;


layout (location = 0) in vec2 inUV;
layout (location = 0) out vec4 outColor;

vec3 octahedral_decode(vec2 f) {
    vec3 n = vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-n.z, 0.0);
    n.x += n.x >= 0.0 ? -t : t;
    n.y += n.y >= 0.0 ? -t : t;
    return normalize(n);
}

void main() 
{
	vec4 emisUOcta = texture(samplerEmission,inUV).rgba;
	vec3 emission = emisUOcta.rgb;
	vec4 albedoUOcta = texture(samplerAlbedo,inUV).rgba;
	vec3 albedo = albedoUOcta.rgb;

  	vec3 normalSample = vec3(0.0, 0.0, 1.0);
	vec2 uoctaNormal = vec2(albedoUOcta.a,emisUOcta.a);
	vec2 octaNormal = (uoctaNormal *2.f) -1.f;
	vec3 worldNormal = octahedral_decode(octaNormal) ;
	vec4 fragPos = texture(samplerPosition,inUV).rgba;
	vec3 n = worldNormal;
	n = normalize(n);
	vec3 lightDir = normalize(vec3(-1.0, -1.0, 0.1));
  	float NdotL = clamp( dot(n, lightDir), 0.3, 1.0 );
  	outColor = vec4( albedo.rgb * NdotL + emission, 1.0 );
}