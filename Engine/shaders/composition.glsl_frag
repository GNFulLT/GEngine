#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64: enable

layout (set = 0,binding = 0) uniform sampler2D samplerPosition;
layout (set = 0,binding = 1) uniform sampler2D samplerAlbedo;
layout (set = 0,binding = 2) uniform sampler2D samplerEmission;
layout (set = 0,binding = 3) uniform sampler2D samplerPBR;


struct PointLight
{
      vec3 position;
      vec3 color;
      float intensity;	
      float radius;	
      float quadraticFalloff;	
      float linearFalloff;	
};

layout(set = 1,binding = 0,scalar) readonly buffer PointLightData { PointLight data[]; } pointLights;
layout(set = 2,binding = 0,scalar) uniform  UniformBuffer 
{ 
	mat4   inMtx;
 	vec3 camPos;
	mat4 view;
	float resolutionWidth;
	float resolutionHeight;
	uint lightCount;
} ubo;

layout (location = 0) in vec2 inUV;
layout (location = 0) out vec4 outColor;

vec3 octahedral_decode(vec2 f) {
    vec3 n = vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-n.z, 0.0);
    n.x += n.x >= 0.0 ? -t : t;
    n.y += n.y >= 0.0 ? -t : t;
    return normalize(n);
}

void main() 
{
	vec4 emisUOcta = texture(samplerEmission,inUV).rgba;
	vec3 emission = emisUOcta.rgb;
	vec4 albedoUOcta = texture(samplerAlbedo,inUV).rgba;
	vec3 albedo = albedoUOcta.rgb;

  	vec3 normalSample = vec3(0.0, 0.0, 1.0);
	vec2 uoctaNormal = vec2(albedoUOcta.a,emisUOcta.a);
	vec2 octaNormal = (uoctaNormal *2.f) -1.f;
	vec3 worldNormal = octahedral_decode(octaNormal) ;
	
	vec3 fragPos = texture(samplerPosition,inUV).rgb;
	vec3 n = worldNormal;
	n = normalize(n);
	
	float ambient = 0.1;

	vec3 fragColor = albedo * ambient;
	
	
	for(int i = 0;i<ubo.lightCount;i++)
	{
		// Vector to the light
		vec3 L = pointLights.data[i].position - fragPos;
		
		// Distance
		float dist = length(L);
		
		// Viewer to fragment
		vec3 V = ubo.camPos - fragPos;
		
		V = normalize(V);
		L = normalize(L);

		// Attenuation
		float atten = pointLights.data[i].radius / (pow(dist, 2.0) + 1.0);
		
		float NdotL = max(0.0,dot(n, L));
		
		//X Diffuse
		vec3 diff = pointLights.data[i].color * albedo * NdotL * atten;

		//X Specular
		vec3 R = reflect(-L, n);
		float NdotR = max(0.0, dot(R, V));
		vec3 spec = pointLights.data[i].color * 1.f * pow(NdotR, 16.0) * atten;

		fragColor += diff + spec;	
	}
		
	//X Sun Light directional
	vec3 lightDir = normalize(vec3(-1.0, -1.0, 0.1));
  	float NdotLS = clamp( dot(n, lightDir), 0.3, 1.0 );
  	outColor = vec4(fragColor,1.f);
}