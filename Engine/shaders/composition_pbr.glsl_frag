#version 460
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64: enable

layout (set = 0,binding = 0) uniform sampler2D samplerPosition;
layout (set = 0,binding = 1) uniform sampler2D samplerAlbedo;
layout (set = 0,binding = 2) uniform sampler2D samplerEmission;
layout (set = 0,binding = 3) uniform sampler2D samplerPBR;

#define NUM_BINS 16
#define BIN_WIDTH (1.0 / NUM_BINS)
#define TILE_SIZE 8

struct PointLight
{
      vec3 position;
      vec3 color;
      float intensity;	
      float radius;	
      float quadraticFalloff;	
      float linearFalloff;	
};

layout(set = 1,binding = 0,scalar) readonly buffer PointLightData { PointLight data[]; } pointLights;
layout(set = 1,binding = 1,scalar) readonly buffer PointLightIndices { uint data[]; } pointLightIndices;
layout(set = 1,binding = 2,scalar) readonly buffer PointLightTiles { uint data[]; } pointLightTiles;
layout(set = 1,binding = 3,scalar) readonly buffer PointLightBins { uint data[]; } pointLightBins;
layout (set = 3,binding = 0) uniform sampler2D samplerSHD;
layout (set = 3,binding = 1) uniform sampler3D samplerOffset;

layout(set = 2,binding = 0,scalar) uniform  UniformBuffer 
{ 
	mat4   inMtx;
 	vec3 camPos;
	mat4 view;
	float resolutionWidth;
	float resolutionHeight;
	uint lightCount;
	uint activeLightCount;
	float zNear;
	float zFar;
	vec3 sunLightDirection;
	vec3 sunLightColor;
	float sunLightIntensity;
	mat4 sunLP;
} ubo;



layout (location = 0) in vec2 inUV;
layout (location = 0) out vec4 outColor;

#define PI 3.1415926535897932384626433832795
#define EPSILON 0.000001

vec3 SRGBtoLINEAR(vec3 srgbIn)
{
	return pow(srgbIn,vec3(1.0/2.2));
}

struct PBRInfo2
{
	float NdotL;                  
	float NdotV;                  
	float NdotH;                  
	float LdotH;                  
	float VdotH;                  
	float roughness;    
	float metalness;              
	vec3 reflectance0;            
	vec3 reflectance90;           
	float alphaRoughness;       
	vec3 diffuseColor;            
	vec3 specularColor;           
};

vec3 octahedral_decode(vec2 f) {
    vec3 n = vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-n.z, 0.0);
    n.x += n.x >= 0.0 ? -t : t;
    n.y += n.y >= 0.0 ? -t : t;
    return normalize(n);
}

float geometryOcclusion(PBRInfo2 info2)
{
	float NdotL = info2.NdotL;
	float NdotV = info2.NdotV;
	float r = info2.alphaRoughness;
	
	float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
	float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
	return attenuationL * attenuationV;
}

vec3 specularReflectionContrib(PBRInfo2 info2)
{
	return info2.reflectance0 + (info2.reflectance90 - info2.reflectance0) * pow(clamp(1.0-info2.VdotH,0.0,1.0),5.0);
}

float microfacetDistribution(PBRInfo2 pbrInputs)
{
	float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
	float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
	return roughnessSq / (PI * f * f);
}

vec3 diffuse(PBRInfo2 pbrInputs)
{
	return pbrInputs.diffuseColor / PI;
}

vec3 BRDF(PBRInfo2 info2,vec3 lightColor)
{
	//X Calculate diffuse contrib
	vec3 F = specularReflectionContrib(info2);
	float G = geometryOcclusion(info2);
	float D = microfacetDistribution(info2);
	
	vec3 diffuseContrib = (1.0 - F) * diffuse(info2);
	vec3 specContrib = F * G * D / (4.0 * info2.NdotL * info2.NdotV);
	
	vec3 color = info2.NdotL * lightColor * (diffuseContrib + specContrib);
	return color;
}



const mat4 biasMat = mat4( 
	0.5, 0.0, 0.0, 0.0,
	0.0, 0.5, 0.0, 0.0,
	0.0, 0.0, 1.0, 0.0,
	0.5, 0.5, 0.0, 1.0 );

#define SHADOW_FACTOR 0.5
float textureProj(vec4 P,vec2 offset)
{
	float shadow = 1.0;
	vec4 shadowCoord = P / P.w;
	if (shadowCoord.z > -1.0 && shadowCoord.z < 1.0) 
	{
		float depth = texture(samplerSHD,shadowCoord.st+offset).r;
		float bias = 0.0000005;

		if (shadowCoord.w > 0.0 && depth < shadowCoord.z - bias) 
		{
			shadow = SHADOW_FACTOR;
		}
	}
	return shadow;
}

float filterPCF(vec4 sc)
{
	ivec2 texDim = textureSize(samplerSHD, 0);
	float scale = 1.5;
	float dx = scale * 1.0 / float(texDim.x);
	float dy = scale * 1.0 / float(texDim.y);

	float shadowFactor = 0.0;
	int count = 0;
	int range = 1;
	
	for (int x = -range; x <= range; x++)
	{
		for (int y = -range; y <= range; y++)
		{
			shadowFactor += textureProj(sc, vec2(dx*x, dy*y));
			count++;
		}
	
	}
	return shadowFactor / count;
}

float filterRandom(vec4 P)
{
	ivec3 offsetCoord;
	vec2 f = mod(gl_FragCoord.xy,vec2(8.0));
	offsetCoord.yz = ivec2(f);
	float sum = 0.0;
	int samplesDiv2 = int(4.0*4.0/2.0);
	vec4 shadowCoord = P / P.w;
	ivec3 texDim = textureSize(samplerOffset, 0);
	vec2 texelSize = vec2(1.0/texDim.x,1.0/texDim.y);
	vec4 iter = shadowCoord;
	float depth = 0.0;
	for (int i = 0 ; i < 4 ; i++) {
		offsetCoord.x = i;
        	vec4 Offsets = texelFetch(samplerOffset, offsetCoord, 0) * 5;
		iter.xy = shadowCoord.xy + Offsets.xy * texelSize;
		depth = textureProj(shadowCoord,Offsets.xy * texelSize);
		sum += depth;
		
	}
   	float shadow = sum / 8.0;
	if (shadow != 0.0 && shadow != 1.0) {
		for (int i = 4 ; i < samplesDiv2 ; i++) {
			 offsetCoord.x = i;
        		vec4 Offsets = texelFetch(samplerOffset, offsetCoord, 0) * 5;
			iter.xy = shadowCoord.xy + Offsets.xy * texelSize;
			depth = textureProj(shadowCoord,Offsets.xy * texelSize);
			sum += depth;
			depth = textureProj(shadowCoord,Offsets.zw * texelSize);
			sum += depth;
		}
		shadow = sum / float(samplesDiv2 * 2.0);
	}
	return shadow;

}

void main() 
{
	vec4 emisUOcta = texture(samplerEmission,inUV).rgba;
	vec3 emission = emisUOcta.rgb;
	vec4 albedoUOcta = texture(samplerAlbedo,inUV).rgba;
	vec3 albedo = albedoUOcta.rgb;
	
	vec4 aoMetallicRoughness = texture(samplerPBR,inUV).rgba; 

  	vec3 normalSample = vec3(0.0, 0.0, 1.0);
	vec2 uoctaNormal = vec2(aoMetallicRoughness.a,emisUOcta.a);
	vec2 octaNormal = (uoctaNormal *2.f) -1.f;
	vec3 worldNormal = octahedral_decode(octaNormal) ;
	
	vec3 fragPos = texture(samplerPosition,inUV).rgb;
	vec3 n = worldNormal;
	n = normalize(n);
	

	float ambient = 0.1;

	vec3 fragColor = albedo * ambient;
	// Viewer to fragment
	vec3 V = ubo.camPos - fragPos;
	V = normalize(V);
	
		
	vec4 posCamera = ubo.view * vec4(fragPos,1.f);
	float zFar = ubo.zFar;
	float linearD = ( ubo.zNear - posCamera.z) / ( zFar - ubo.zNear );
    	int binIndex = int( linearD / BIN_WIDTH );
	binIndex = max(binIndex,0);
	uint binValue = pointLightBins.data[binIndex];
	uint minLightIndex = binValue & 0xFFFF;
	uint maxLightIndex = (binValue >> 16) & 0xFFFF;
	
   	uvec2 position = uvec2(gl_FragCoord.x - 0.5, gl_FragCoord.y - 0.5);
    	position.y = uint( ubo.resolutionHeight ) - position.y;
	
	float numWords = (ubo.lightCount + 31)/32;
	
    	uvec2 tile = position / uint( TILE_SIZE );
	 
	uint stride = uint( numWords ) * ( uint( ubo.resolutionWidth ) / uint( TILE_SIZE ) );
    	uint address = tile.y * stride + tile.x;
	float roughness = aoMetallicRoughness.g;
	float metallic = aoMetallicRoughness.b;

	float NdotV = clamp(abs(dot(n, V)),0.001,1.0);
	
	vec3 f0 = vec3(0.04);
	vec3 specularColor = mix(f0, albedo, metallic);
	
	float reflectance = max(max(specularColor.r,specularColor.g),specularColor.b);
	float reflectance90 = clamp(reflectance * 25.0,0.0,1.0);
	vec3 specularColor90 = vec3(1.0,1.0,1.0) * reflectance90;
	
	vec3 diffuseColor = albedo * (vec3(1.0) - f0);
	diffuseColor *= 1.0 - metallic;
	 
	PBRInfo2 info2 = PBRInfo2(
		0.0,
		NdotV,
		0.0,
		0.0,
		0.0,
		roughness,
		metallic,
		specularColor,
		specularColor90,
		roughness*roughness,
		diffuseColor,
		specularColor
		
	);
	for(uint i = 0;i<ubo.lightCount;i++)
	{
		uint globalLightIndex = pointLightIndices.data[i];
		PointLight light = pointLights.data[globalLightIndex];
		// Vector to the light
		vec3 L = light.position - fragPos;
		float dist = length(L);

		L = normalize(L);

		vec3 H = normalize(L+V);
		
		float NdotL = clamp(dot(n, L), 0.001, 1.0);
		float NdotH = clamp(dot(n, H), 0.0, 1.0);
		float LdotH = clamp(dot(L, H), 0.0, 1.0);
		float VdotH = clamp(dot(V, H), 0.0, 1.0);
		
		info2.NdotL = NdotL;
		info2.NdotH = NdotH;
		info2.LdotH = LdotH;
		info2.VdotH = VdotH;
		
		vec3 brdfContrib = BRDF(info2,light.color);
		
		// Attenuation of point light quadratic fall off		
		float atten = light.radius / (pow(dist, 2.0)*light.quadraticFalloff + dist * light.linearFalloff);
		fragColor += brdfContrib * light.intensity * atten;
	}
	
	vec4 shadowClip	= biasMat * ubo.sunLP * vec4(fragPos, 1.0);
	float shadowFactor = filterPCF(shadowClip);
	
	//X Sun Light directional
	{
	    vec3 L = normalize(ubo.sunLightDirection);
	    vec3 H = normalize(L+V);
  	    float NdotL = clamp( dot(n, L), 0.2, 1.0 );
	    float NdotH = clamp(dot(n, H), 0.0, 1.0);
	    float LdotH = clamp(dot(L, H), 0.0, 1.0);
	    float VdotH = clamp(dot(V, H), 0.0, 1.0);
		
	    info2.NdotL = NdotL;
	    info2.NdotH = NdotH;
	    info2.LdotH = LdotH;
	    info2.VdotH = VdotH;
		
	    vec3 brdfContrib = BRDF(info2, ubo.sunLightColor);
	    fragColor += brdfContrib * ubo.sunLightIntensity * 0.1*shadowFactor; 
	}

	fragColor = mix(fragColor,fragColor * aoMetallicRoughness.r,1.f);
  	outColor = vec4(fragColor+emission,1.f);
}