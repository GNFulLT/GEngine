#version 460

#extension GL_EXT_shader_explicit_arithmetic_types_int64: enable
#extension GL_EXT_scalar_block_layout : require


layout (location = 0) in vec3 vPosition;
layout (location = 1) in vec2 vTexCoord;
layout (location = 2) in vec2 vNormal;

#define MAX_LOD_COUNT 8

struct BoundingBox
{
	vec4 min;
	vec4 max;
};

struct MeshData{
	BoundingBox boundingBox;
	vec4 extents;
	uint lodCount;
	uint indexOffset;
	uint vertexOffset;
	uint vertexCount;
	uint lodOffset[MAX_LOD_COUNT];
}; 

struct DrawData
{
	uint meshIndex;
	uint materialIndex;
	uint transformIndex;
};

layout(set = 0,binding = 0,scalar) uniform  UniformBuffer { mat4   inMtx; vec3 camPos;} ubo;

layout(set = 1,binding = 1,scalar) readonly buffer MeshDatas { MeshData data[]; } meshDatas;
layout(set = 1,binding = 2,scalar) readonly buffer DrawDatas { DrawData data[]; } drawDatas;
layout(set = 1,binding = 3,scalar) readonly buffer DrawID { uint data[]; } drawIDs;
layout(set = 2,binding = 5,scalar) readonly buffer TransformDatas { mat4 data[]; } transformDatas;

layout(location = 0) out vec2 uv;
layout(location = 1) out vec3 v_worldNormal;
layout(location = 2) out vec4 v_worldPos;
layout(location = 3) out flat uint matIdx;


vec3 octahedral_decode(vec2 f) {
    vec3 n = vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
    float t = max(-n.z, 0.0);
    n.x += n.x >= 0.0 ? -t : t;
    n.y += n.y >= 0.0 ? -t : t;
    return normalize(n);
}



void main()
{
	uint drawDataId = drawIDs.data[gl_InstanceIndex];
	uint meshIndex = drawDatas.data[drawDataId].meshIndex;
	uint transformIndex = drawDatas.data[drawDataId].transformIndex;
	mat3 inModel = transpose(inverse(mat3(transformDatas.data[transformIndex])));
	
	// Proj position
	vec4 tempPos = vec4(vPosition.x,-vPosition.y,vPosition.z, 1.0f);

	gl_Position = ubo.inMtx *  transformDatas.data[transformIndex]  * tempPos;

	//X Unpack the normal data and calcul
	v_worldNormal = inModel * octahedral_decode(vNormal);
	//X World Position
	v_worldPos = transformDatas.data[0-transformIndex] * tempPos;
	uv = vTexCoord;
	matIdx = drawDatas.data[drawDataId].materialIndex;

}
